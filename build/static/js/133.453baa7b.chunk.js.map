{"version":3,"sources":["views/aboutUs/AddAbout.js","components/CkEditor5.js"],"names":["axios","require","default","AddAbout","useForm","mode","history","control","handleSubmit","formState","errors","useHistory","useState","error","setError","loading","setLoading","cardOneTitle","setCardOneTitle","setCardOneImage","cardOneButtonText","setCardOneButtonText","cardOneButtonLink","setCardOneButtonLink","setSectionDescription","setDescription","xs","sm","style","float","className","to","encType","onSubmit","e","preventDefault","formData","FormData","post","headers","then","response","push","catch","err","data","errorMessage","xl","htmlFor","onEditorValue","type","onChange","target","value","placeholder","autoComplete","variant","files","custom","id","disabled","CkEditor5","props","ref","useRef","editor","ClassicEditor","editorValue","event","getData"],"mappings":"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","file":"static/js/133.453baa7b.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport {\n    // CButton,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormGroup,\n    CInput,\n    CInputFile,\n    CInputGroup,\n    CLabel,\n    CLink,\n    CRow,\n    CTextarea\n} from '@coreui/react'\n\n// import CIcon from '@coreui/icons-react'\n// import { DocsLink } from 'src/reusable'\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useHistory } from 'react-router';\n// import { EditorState } from 'draft-js';\n// import { Editor } from \"react-draft-wysiwyg\";\n// import \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n// import '../../App.css';\n// client / src / views / aboutUs / AboutBannerComponent.js\nimport CkEditor from '../../components/CkEditor5.js';\n\nconst axios = require('axios').default;\n\n\n\nconst AddAbout = () => {\n    const { control, handleSubmit, formState: { errors } } = useForm({ mode: 'all' });\n    let history = useHistory();\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    // const [content, setContent] = useState('');\n\n    const [cardOneTitle, setCardOneTitle] = useState('');\n    const [cardOneImage, setCardOneImage] = useState('');\n    const [cardOneButtonText, setCardOneButtonText] = useState('');\n    const [cardOneButtonLink, setCardOneButtonLink] = useState('');\n    const [cardOneDescription, setCardOneDescription] = useState('');\n    // const [sectionThreeDescription, setSectionThreeDescription] = useState(() => EditorState.createEmpty(),);\n    const [sectionDescription, setSectionDescription] = useState('');\n    const [description, setDescription] = useState('');\n\n\n\n    const handleSectionDescription = (data) => {\n        setSectionDescription(data);\n    }\n    const handleDescription = (data) => {\n        setDescription(data);\n    }\n\n\n    const cardOneTitleOnChange = (e) => {\n        setCardOneTitle(e.target.value);\n    }\n    const cardOneImageOnChange = (e) => {\n        setCardOneImage(e.target.files[0]);\n    }\n    const cardOneButtonTextOnChange = (e) => {\n        setCardOneButtonText(e.target.value);\n    }\n    const cardOneButtonLinkOnChange = (e) => {\n        setCardOneButtonLink(e.target.value);\n    }\n    const cardOneDescriptionOnChange = (e) => {\n        setCardOneDescription(e.target.value);\n    }\n\n    const onHandlerSubmit = (e) => {\n        e.preventDefault();\n        // console.log('value', value);\n        // console.log('bannerImage', bannerImage);\n        setError(null);\n        setLoading(true);\n\n        const formData = new FormData();\n        // formData.append('bannerImage', bannerImage);\n        // formData.append('shortOrder', shortOrder);\n        // formData.append('title', title);\n        // formData.append('description', description);\n        // formData.append('bannerButtonText', bannerButtonText);\n        // formData.append('bannerButtonLink', bannerButtonLink);\n        // formData.append('content', content);\n        // console.log(formData);\n\n        axios.post('/banner/', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n            .then(response => {\n                setLoading(false);\n                // setUserSession(response.data.token, response.data.user);\n                history.push('/banners-manaement/banners')\n                // console.log(response);\n            })\n            .catch(err => {\n                setLoading(false);\n                if (err.response.data.errorMessage) {\n                    setError(err.response.data.errorMessage);\n                } else {\n                    setError(\"Something went wrong!\");\n                }\n            });\n    }\n    // console.log(errors);\n    return (\n        <div>\n            <CRow>\n                <CCol xs=\"12\" sm=\"12\">\n                    <CCard>\n                        <CCardHeader>\n                            Add About Card\n                            <CLink style={{ float: 'right' }} className=\"btn btn-success\" to=\"/about-us/add-about-us/add-cards\">\n                                Add Cards\n                            </CLink>\n                        </CCardHeader>\n                        <CCardBody>\n\n                            <CForm encType=\"multipart/form-data\" onSubmit={onHandlerSubmit}>\n                                {\n                                    error &&\n                                    <p className=\"text-danger\">\n                                        {error}\n                                    </p>\n                                }\n                                <CRow>\n                                    <CCol xl=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"shortItem\">Section description</CLabel>\n                                            <CkEditor onEditorValue={handleSectionDescription} />\n\n                                            {/* <CInputGroup className=\"mb-3\">\n                                                <CTextarea\n                                                    id=\"content\"\n                                                    rows=\"3\"\n                                                    onChange={sectionTwoDescriptionOnChange} value={sectionTwoDescription}\n                                                ></CTextarea>\n                                            </CInputGroup> */}\n                                        </CFormGroup>\n                                    </CCol>\n                                </CRow>\n                                <CRow>\n                                    <CCol xl=\"6\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"shortItem\">Title</CLabel>\n                                            <CInputGroup className=\"mb-3\">\n                                                <CInput type=\"text\" onChange={cardOneTitleOnChange} value={cardOneTitle} placeholder=\"Title\" autoComplete=\"title\" />\n                                            </CInputGroup>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol xs=\"6\">\n                                        <CLabel htmlFor=\"category\">Image</CLabel>\n                                        <CInputGroup className=\"mb-3\">\n                                            <CLabel htmlFor=\"bannerImage\" variant=\"custom-file\">\n                                                Choose Image...\n                                            </CLabel>\n                                            <CInputFile onChange={cardOneImageOnChange} custom id=\"bannerImage\" type=\"file\" />\n                                        </CInputGroup>\n                                    </CCol>\n                                </CRow>\n                                <CRow>\n                                    <CCol xl=\"6\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"shortItem\">Button Text</CLabel>\n                                            <CInputGroup className=\"mb-3\">\n                                                <CInput type=\"text\" onChange={cardOneButtonTextOnChange} value={cardOneButtonText} placeholder=\"Title\" autoComplete=\"title\" />\n                                            </CInputGroup>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol xl=\"6\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"shortItem\">Button Link</CLabel>\n                                            <CInputGroup className=\"mb-3\">\n                                                <CInput type=\"text\" onChange={cardOneButtonLinkOnChange} value={cardOneButtonLink} placeholder=\"Title\" autoComplete=\"title\" />\n                                            </CInputGroup>\n                                        </CFormGroup>\n                                    </CCol>\n                                </CRow>\n                                <CRow>\n                                    <CCol xl=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"shortItem\">Description</CLabel>\n                                            <CkEditor onEditorValue={handleDescription} />\n\n                                            {/* <CInputGroup className=\"mb-3\">\n                                                <CTextarea\n                                                    // component=\"textarea\"\n                                                    id=\"content\"\n                                                    rows=\"3\"\n                                                    onChange={cardOneDescriptionOnChange} value={cardOneDescription}\n                                                ></CTextarea>\n                                            </CInputGroup> */}\n                                        </CFormGroup>\n                                    </CCol>\n                                </CRow>\n                                \n                                <CRow>\n                                    <CCol xs=\"8\">\n                                        <button className=\"btn btn-success\" disabled={loading ? true : false} type=\"submit\">{loading ? 'Loading...' : 'Add Card'}</button>\n                                    </CCol>\n                                </CRow>\n                            </CForm>\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n\n        </div>\n    )\n}\n\nexport default AddAbout\n","import React, { forwardRef, useEffect, useRef, useState } from 'react'\nimport {\n    CCol,\n    CRow,\n    CInput,\n\n} from '@coreui/react'\n\n// import { EditorState } from 'draft-js';\n// import { Editor } from \"react-draft-wysiwyg\";\n// import \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n// import '../App.css';\n\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\nlet CkEditor5 = (props, ref) => {\n    const editorValueRef = useRef();\n   \n    const editorOnChange = (event, editor) => {\n        if (editor.getData()) {\n            props.onEditorValue(editor.getData());\n        }\n    }\n \n    return (\n        <div>\n            <CRow>\n                <CCol xs=\"12\" sm=\"12\">\n                    {/* <Editor\n                        toolbar={{\n                            image: {\n                                urlEnabled: true,\n                                uploadEnabled: true,\n                                uploadCallback: _uploadImageCallBack,\n                                alignmentEnabled: true,\n                                inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg'\n                            }\n                        }}\n                        editorState={wysiwygDescription}\n                        onEditorStateChange={onEditorStateChange}\n                        wrapperClassName=\"wrapper-class\"\n                        editorClassName=\"editor-class\"\n                        toolbarClassName=\"toolbar-class\"\n                        onChange={editorOnChange}\n                        ref={editorValueRef}\n                    // ref={ref => editorValueRef(ref)}\n                    /> */}\n\n                    <CKEditor\n                        editor={ClassicEditor}\n                        data={(props.editorValue ? props.editorValue : '')}\n                        // onReady={editor => {\n                        //     // You can store the \"editor\" and use when it is needed.\n                        //     console.log('Editor is ready to use!', editor);\n                        // }}\n                        // onChange={(event, editor) => {\n                        //     const data = editor.getData();\n                        //     console.log({ event, editor, data });\n                        // }}\n                        onChange={editorOnChange}\n                        // onBlur={(event, editor) => {\n                        //     console.log('Blur.', editor);\n                        // }}\n                        // onFocus={(event, editor) => {\n                        //     console.log('Focus.', editor);\n                        // }}\n                    />\n                </CCol>\n            </CRow>\n        </div>\n    )\n}\n\nexport default CkEditor5\n"],"sourceRoot":""}